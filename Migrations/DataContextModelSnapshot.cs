// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

namespace APITEST.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApi.Entities.BusinessHoursTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Friday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Monday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Saturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Sunday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Thursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Tuesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Wednesday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WorkHours")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("BusinessHoursTable");
                });

            modelBuilder.Entity("WebApi.Entities.ContactDetailsTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Website")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("ContactDetailsTable");
                });

            modelBuilder.Entity("WebApi.Entities.JobRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Location")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MainTableFKId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainTableFKId");

                    b.ToTable("JobRequests");
                });

            modelBuilder.Entity("WebApi.Entities.MainTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CallOutFee")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Province")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotalPhotos")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("UserRating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MainTable");
                });

            modelBuilder.Entity("WebApi.Entities.PhotosTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Image1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Image5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("PhotosTable");
                });

            modelBuilder.Entity("WebApi.Entities.ReviewTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SumOfTotalRatings")
                        .HasColumnType("int");

                    b.Property<int>("SumOfTotalUserRated")
                        .HasColumnType("int");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("ReviewTable");
                });

            modelBuilder.Entity("WebApi.Entities.ServiceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TypeOfService")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ServiceList");
                });

            modelBuilder.Entity("WebApi.Entities.UserTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("isCertified")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.Property<string>("proofOfCertification")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("UserTable");
                });

            modelBuilder.Entity("WebApi.Entities.WorkLocationTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("mainTableFKId")
                        .HasColumnType("int");

                    b.Property<string>("province")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("suburb")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("workInCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("mainTableFKId");

                    b.ToTable("WorkLocationTable");
                });

            modelBuilder.Entity("WebApi.Entities.BusinessHoursTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("BusinessHoursTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ContactDetailsTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("ContactDetailsTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.JobRequest", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("JobRequests")
                        .HasForeignKey("MainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.PhotosTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("PhotosTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.ReviewTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("ReviewTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.UserTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("UserTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Entities.WorkLocationTable", b =>
                {
                    b.HasOne("WebApi.Entities.MainTable", "MainTable")
                        .WithMany("WorkLocationTable")
                        .HasForeignKey("mainTableFKId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
